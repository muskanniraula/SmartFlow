@page "/debt"
<link href="css/Debt.css" rel="stylesheet" />

<nav class="navbar">
    <div class="nav">
        <a class="nav-link" @onclick="NavigateToDashboard">Dashboard</a>
        <a class="nav-link" @onclick="NavigateToTransaction">Transactions</a>
        <a class="nav-link active" @onclick="NavigateToDebt">Debts</a>
    </div>
    <div class="logout">
        <button type="button" class="btn w-100" @onclick="ShowLogoutConfirmation">Logout</button>
    </div>
</nav>

<!-- The Logout Confirmation Modal -->
@if (IsLogout)
{
    <div class="modal fade show" tabindex="-1" role="dialog" style="display: block;" aria-modal="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Are you sure you want to logout?</h5>
                    <button type="button" class="btn-close" @onclick="CloseLogoutConfirmation"></button>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseLogoutConfirmation">No</button>
                    <button type="button" class="btn btn-primary" @onclick="Logout">Yes</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<div class="d-flex justify-content-between align-items-center mb-4">
    
        <h3>Transactions</h3>
        <button class="btn btn-primary" @onclick="OpenModal">Add Debt</button>
</div>

<div class="row mb-4">
    <div class="col-md-3">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Current Balance</h5>
                <p class="card-text h4">@GlobalState.CurrentUser?.currency @TotalBalance</p>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Total Debt</h5>
                <p class="card-text h4">@GlobalState.CurrentUser?.currency @TotalDebt</p>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Remaining Debt</h5>
                <p class="card-text h4">@GlobalState.CurrentUser?.currency @RemainingDebt</p>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Cleared Debt</h5>
                <p class="card-text h4">@GlobalState.CurrentUser?.currency @ClearedDebt</p>
            </div>
        </div>
    </div>
 </div>

<!-- Filter controls in one line -->
<div class="row align-items-end mb-3">
    <div class="col">
        <input type="text" class="form-control" placeholder="Search by name or source" @bind="searchTerm" />
    </div>
    <div class="col">
        <label>From Date</label>
        <input type="date" class="form-control" @bind="startDate" />
    </div>
    <div class="col">
        <label>To Date</label>
        <input type="date" class="form-control" @bind="endDate" />
    </div>
    <div class="col-auto">
        <div class="d-flex gap-2">
            <button class="btn btn-primary" @onclick="ApplyFilters">Apply Filters</button>
            <button class="btn btn-outline-secondary" @onclick="ClearFilters">Clear Filters</button>
        </div>
    </div>
</div>

<!-- Debts Table -->
<div class="mt-5">
    <div>
        <table class="table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Source</th>
                    <th>Amount</th>
                    <th>Start Date</th>
                    <th>Due Date</th>
                    <th>Cleared Date</th>
                    <th>Category</th>
                    <th>Status</th>
                    <th>Type</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @if (filteredDebts.Any())
                {
                    @foreach (var debt in filteredDebts)
                    {
                        <tr>
                            <td>@debt.Name</td>
                            <td>@debt.Source</td>
                            <td>@GlobalState.CurrentUser?.currency @debt.Amount</td>
                            <td>@debt.StartDate.ToShortDateString()</td>
                            <td>@debt.DueDate.ToShortDateString()</td>
                            <td>@debt.ClearedDate?.ToShortDateString()</td>
                            <td>@debt.Category</td>
                            <td>@debt.Status</td>
                            <td>@debt.Type</td>
                            <td>
                                <button class="btn btn-sm btn-outline-primary" @onclick="() => EditClearedDate(debt)">
                                    <i class="bi bi-pencil-square"></i>
                                </button>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="7">No Debts found.</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@if (showModal)
{
<div class="modal fade show" tabindex="-1" role="dialog" style="display: block;" aria-modal="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Add Debt</h5>
                        <button type="button" class="btn-close" @onclick="CloseModal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <label>Name</label>
                            <input type="text" class="form-control" @bind="newDebt.Name" />
                        </div>
                        <div class="mb-3">
                            <label>Source</label>
                            <input type="text" class="form-control" @bind="newDebt.Source" />
                        </div>
                        <div class="mb-3">
                            <label>Amount</label>
                            <input type="number" class="form-control" @bind="newDebt.Amount" />
                        </div>
                    <div class="mb-3">
                        <label>Start Date</label>
                        <input type="date" class="form-control" @bind="newDebt.StartDate" />
                    </div>

                        <div class="mb-3">
                            <label>Due Date</label>
                            <input type="date" class="form-control" @bind="newDebt.DueDate" />
                        </div>
                        <div class="mb-3">
                            <label>Category</label>
                            <input type="text" class="form-control" @bind="newDebt.Category" />
                        </div>
                        <div class="mb-3">
                            <label>Status</label>
                            <select class="form-control" @bind="newDebt.Status">
                                <option value="Pending">Pending</option>
                                <option value="Cleared">Cleared</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label>Type</label>
                            <select class="form-control" @bind="newDebt.Type">
                                <option value="Debt">Debt</option>
                            </select>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseModal">Close</button>
                        <button type="button" class="btn btn-primary" @onclick="AddDebt">Add</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
}

@if (showEditModal)
{
        <div class="modal fade show" tabindex="-1" role="dialog" style="display: block;" aria-modal="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Edit Cleared Date</h5>
                        <button type="button" class="btn-close" @onclick="CloseEditModal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <label>Cleared Date</label>
                            <input type="date" class="form-control" @bind="editingDebt.ClearedDate" />
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseEditModal">Cancel</button>
                        <button type="button" class="btn btn-primary" @onclick="SaveClearedDate">Save</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
}
@code
{
    private string searchTerm = "";
    private DateTime? startDate = null;
    private DateTime? endDate = null;
    private decimal TotalDebt => debts.Sum(d => d.Amount);
    private decimal ClearedDebt => debts.Where(d => d.Status == "Cleared").Sum(d => d.Amount);
    private decimal RemainingDebt => TotalDebt - ClearedDebt;

    // Shared calculation for total balance from transactions (same as in the Transaction page)
    private decimal TotalBalance => transactions
    .Where(t => t.Type == "Credit") // Consider only inflows (credits)
    .Sum(t => t.Amount) -
    transactions
    .Where(t => t.Type == "Debit") // Consider only outflows (debits)
    .Sum(t => t.Amount);

    private List<Models.Debt> filteredDebts => debts
    .Where(d => (string.IsNullOrEmpty(searchTerm) ||
                 d.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                 d.Source.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) &&
                (!startDate.HasValue || d.StartDate >= startDate.Value) && // StartDate filter
                (!endDate.HasValue || d.StartDate <= endDate.Value) &&    // EndDate filter
                (!startDate.HasValue || d.DueDate >= startDate.Value) &&  // DueDate filter
                (!endDate.HasValue || d.DueDate <= endDate.Value))        // DueDate filter
    .ToList();




    private bool IsLogout;

    private void NavigateToTransaction()
    {
        Nav.NavigateTo("/Transaction");
    }

    private void NavigateToDashboard()
    {
        Nav.NavigateTo("/dashboard");
    }

    private void NavigateToDebt()
    {
        Nav.NavigateTo("/Debt");
    }

    private void NavigateToLogin()
    {
        Nav.NavigateTo("/");
    }

    private List<Models.Debt> debts = new();
    private Models.Debt newDebt = new();
    private bool showModal = false;
    private bool showEditModal = false;
    private Models.Debt editingDebt = new();
    private List<Models.Transaction> transactions = new();

    private List<Models.Debt> debt;

    // On initialization, fetch debts and transactions
    protected override async Task OnInitializedAsync()
    {
        debts = DebtService.GetAllDebts();
        transactions = TransactionService.GetAllTransactions(); // Fetch transactions here

    }
    private async Task ApplyFilters()
    {
        // Validate date range
        if (startDate.HasValue && endDate.HasValue && startDate > endDate)
        {
            // Optionally, show an error if startDate is later than endDate
            return;
        }

        StateHasChanged(); // Refresh the UI to reflect the filtered list
    }
    private void ClearFilters()
    {
        // Clear all the filters
        searchTerm = string.Empty;
        startDate = null;
        endDate = null;

        // Refresh the UI to reflect the cleared filters
        StateHasChanged();
    }

    private void ShowLogoutConfirmation()
    {
        IsLogout = true;
    }
    private void CloseLogoutConfirmation()
    {
        IsLogout = false;
    }
    private void Logout()
    {
        NavigateToLogin(); // Navigate to login page
    }

    private void OpenModal()
    {
        newDebt = new Models.Debt
            {
                StartDate = DateTime.Now, // Set to current date
                DueDate = DateTime.Now.AddDays(30), // Default to 30 days ahead
                Status = "Pending",
                Type = "Debt"
            };
        showModal = true;
    }



    private void CloseModal()
    {
        showModal = false;
    }

    private async Task AddDebt()
    {
        if (ValidateDebt(newDebt))
        {
            await DebtService.AddDebtAsync(newDebt); // Add the new debt to the service
            debts = DebtService.GetAllDebts(); // Refresh the list after adding the debt
            StateHasChanged(); // Force UI update
            CloseModal(); // Close the modal after adding
        }
    }





    private void EditClearedDate(Models.Debt debt)
    {
        editingDebt = debt;
        showEditModal = true;
    }

    private void CloseEditModal()
    {
        showEditModal = false;
    }

    private void SaveClearedDate()
    {
        if (editingDebt != null)
        {
            // Set ClearedDate and Status
            editingDebt.Status = editingDebt.ClearedDate == null ? "Pending" : "Cleared";

            DebtService.UpdateDebt(editingDebt); // Update the debt in the service
            debts = DebtService.GetAllDebts(); // Refresh the debts list
            CloseEditModal();
        }
    }

    private bool ValidateDebt(Models.Debt debt)
    {
        return !string.IsNullOrWhiteSpace(debt.Name) &&
               !string.IsNullOrWhiteSpace(debt.Source) &&
               debt.Amount > 0;
    }
}