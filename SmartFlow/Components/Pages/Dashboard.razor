@page "/dashboard"
<link href="css/Dashboard.css" rel="stylesheet" />

<nav class="navbar">
    <div class="nav">
    <a class="nav-link active" @onclick="NavigateToDashboard">Dashboard</a>
    <a class="nav-link" @onclick="NavigateToTransaction">Transactions</a>
    <a class="nav-link" @onclick="NavigateToDebt">Debts</a>
    </div>
    <div class="logout">
        <button type="button" class="btn w-100" @onclick="ShowLogoutConfirmation">Logout</button>
    </div>
</nav>

<!-- The Logout Confirmation Modal -->
@if (IsLogout)
{
    <div class="modal fade show" tabindex="-1" role="dialog" style="display: block;" aria-modal="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Are you sure you want to logout?</h5>
                    <button type="button" class="btn-close" @onclick="CloseLogoutConfirmation"></button>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseLogoutConfirmation">No</button>
                    <button type="button" class="btn btn-primary" @onclick="Logout">Yes</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<h3>Dashboard</h3>

<!-- Stats Cards -->
<div class="row">
    <div class="col-md-2">
        <div class="card-balance">
            <div class="card-body">
                <h6 class="card-title-balance">Current Balance</h6>
                <p class="card-text-balance h4">@GlobalState.CurrentUser?.currency @totalBalance</p>
            </div>
        </div>
    </div>
    <div class="col-md-2">
        <div class="card">
            <div class="card-body">
                <h6 class="card-title">Total Income</h6>
                <p class="card-text h4">@GlobalState.CurrentUser?.currency @totalInflows</p>
            </div>
        </div>
    </div>
    <div class="col-md-2">
        <div class="card">
            <div class="card-body">
                <h6 class="card-title">Total Expense</h6>
                <p class="card-text h4">@GlobalState.CurrentUser?.currency @totalOutflows</p>
            </div>
        </div>
    </div>
    <div class="col-md-2">
        <div class="card">
            <div class="card-body">
                <h6 class="card-title">Total Debts</h6>
                <p class="card-text h4">@GlobalState.CurrentUser?.currency @totalDebt</p>
            </div>
        </div>
    </div>
    <div class="col-md-2">
        <div class="card">
            <div class="card-body">
                <h6 class="card-title">Cleared Debts</h6>
                <p class="card-text h4">@GlobalState.CurrentUser?.currency @clearedDebt</p>
            </div>
        </div>
    </div>
    <div class="col-md-2">
        <div class="card">
            <div class="card-body">
                <h6 class="card-title">Remaining Debts</h6>
                <p class="card-text h4">@GlobalState.CurrentUser?.currency @remainingDebt</p>
            </div>
        </div>
    </div>
</div>

<!-- charts Section -->
<div class="chart-section">
    <div class="row">
        <div class="col-md-12">
            <div class="card">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center mb-4">
                        <h5>Debt Overview</h5>
                        <div class="date-range d-flex gap-3">
                            <div class="input-group">
                                <label for="startDate">Start Date:</label>
                                <InputDate @bind-Value="filterStartDate" class="form-control" id="startDate" />
                            </div>
                            <div class="input-group">
                                <label for="dueDate">End Date:</label>
                                <InputDate @bind-Value="filterDueDate" class="form-control" id="dueDate" />
                            </div>
                            <button class="btn btn-primary" @onclick="FilterPieChartData" style="width: 300px;">Apply Filter</button>
                            <button class="btn btn-outline-secondary" @onclick="ClearPieChartFilters" style="width: 300px;">Clear</button>
                        </div>
                    </div>
                    <MudChart ChartType="ChartType.Pie" Width="300px" Height="300px" InputData="@data" />

                    <!-- Legend Section -->
                    <div class="mt-4">
                        <div class="d-flex flex-column gap-3">
                            <div class="d-flex align-items-center">
                                <span class="circle-indicator" style="background-color: #4079FF;"></span>
                                <span class="ms-2">Cleared Debt: @GlobalState.CurrentUser?.currency @clearedDebt</span>
                            </div>
                            <div class="d-flex align-items-center">
                                <span class="circle-indicator" style="background-color: #56E8B4;"></span>
                                <span class="ms-2">Remaining Debt: @GlobalState.CurrentUser?.currency @remainingDebt</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Pending Debts Section -->
<div class="section-container">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h4>Pending Debts</h4>
        <div class="date-range">
            <div class="d-flex gap-3 d-flex">
                <div class="input-group">
                    <label for="startDate">Start Date:</label>
                    <InputDate @bind-Value="filterStartDate" class="form-control" id="startDate" />
                </div>
                <div class="input-group">
                    <label for="dueDate">Due Date:</label>
                    <InputDate @bind-Value="filterDueDate" class="form-control" id="dueDate" />
                </div>
                <button class="btn btn-primary" @onclick="FilterPendingDebts" style="width: 300px;">Apply Filter</button>
                <button class="btn btn-outline-secondary" @onclick="ClearFilters" style="width: 300px;">Clear</button>

            </div>
        </div>
    </div>

    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Source</th>
                <th>Amount</th>
                <th>Start Date</th>
                <th>Due Date</th>
                <th>Category</th>
                <th>Status</th>
            </tr>
        </thead>
            <tbody>
                @if (pendingDebts.Any())
                {
                    @foreach (var debt in pendingDebts)
                    {
                        <tr>
                            <td>@debt.Name</td>
                            <td>@debt.Source</td>
                            <td>@GlobalState.CurrentUser?.currency @debt.Amount</td>
                            <td>@debt.StartDate.ToShortDateString()</td>
                            <td>@debt.DueDate.ToShortDateString()</td>
                            <td>@debt.Category</td>
                            <td>@debt.Status</td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="6">No pending debts found.</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>


<!-- Filtered Transactions Table -->
<div class="section-container">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h4>Top 5 Transactions</h4>
        <div class="date-range">
            <div class="d-flex gap-3 " >
                <div class="input-group">
                    <label for="filterType">Filter By:</label>
                    <select id="filterType" @bind="selectedFilterType" class="form-control">
                        <option value="Inflow">Inflow</option>
                        <option value="Outflow">Outflow</option>
                    </select>
                </div>
                <div class="input-group">
                    <label for="filterOrder">Order:</label>
                    <select id="filterOrder" @bind="selectedFilterOrder" class="form-control">
                        <option value="Highest">Highest</option>
                        <option value="Lowest">Lowest</option>
                    </select>
                </div>
                <button @onclick="FilterTopTransactions" class="btn btn-primary" style="width: 300px;">Apply Filter</button>

                
            </div>
        </div>
    </div>
    
<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Amount</th>
            <th>Date</th>
            <th>Type</th>
            <th>Category</th>
            <th>Status</th>
            <th>Tags</th>
            <th>Notes</th>
        </tr>
    </thead>
    <tbody>

        @foreach (var transaction in filteredTransactions)
        {
            <tr>
                <td>@transaction.Name</td>
                <td>@GlobalState.CurrentUser?.currency @transaction.Amount</td>
                <td>@transaction.Date.ToShortDateString()</td>
                <td>@transaction.Type</td>
                <td>@transaction.Category</td>
                <td>@transaction.Status</td>
                <td>@transaction.Tags</td>
                <td>@transaction.Notes</td>
            </tr>
        }
    </tbody>
</table>
</div>

@code {
    private double[] data = new double[] { };

    private string[] labels = new string[] { "Cleared Debt", "Remaining Debt"};
    private decimal totalBalance;
    private decimal totalInflows;
    private decimal totalOutflows;
    private decimal totalDebt;
    private decimal clearedDebt;
    private decimal remainingDebt;
    private bool IsLogout;
    private List<Models.Transaction> transactions = new List<Models.Transaction>();
    private List<Debt> debts = new List<Debt>(); // Store debts separately
    private List<Models.Transaction> filteredTransactions = new List<Models.Transaction>();
    // Filter options
    private string selectedFilterType = "Inflow";
    private string selectedFilterOrder = "Highest";
    private DateTime? filterStartDate;
    private DateTime? filterDueDate;
    private string hoveredSegment = null;
    private List<SmartFlow.Models.Debt> pendingDebts = new List<SmartFlow.Models.Debt>();

    protected override async Task OnInitializedAsync()
    {
        transactions = TransactionService.GetAllTransactions();
        var allDebts = DebtService.GetAllDebts(); // Fetch all debts
        pendingDebts = allDebts.Where(d => d.Status == "Pending").ToList();
        await CalculateDebtTotals(); // Call DebtService to calculate debt totals
        CalculateTotals();
        FilterTopTransactions();
    }

    private void CalculateTotals()
    {
        /// Calculate total inflows and total outflows from transactions
        totalInflows = transactions.Where(t => t.Type == "Credit").Sum(t => t.Amount);
        totalOutflows = transactions.Where(t => t.Type == "Debit").Sum(t => t.Amount);

        // Calculate the total balance as the difference between total inflows and total outflows
        totalBalance = totalInflows - totalOutflows;
    }

    private async Task CalculateDebtTotals()
    {
        // Get all debts from the DebtService
        var debts = DebtService.GetAllDebts();

        // Calculate total debt, cleared debt, and remaining debt
        totalDebt = debts.Sum(d => d.Amount);
        clearedDebt = debts.Where(d => d.Status == "Cleared").Sum(d => d.Amount);
        remainingDebt = totalDebt - clearedDebt;

        // Update the data array for the pie chart
        data = new double[] { (double)clearedDebt, (double)remainingDebt };
    }

    private void FilterPieChartData()
    {
        // Filter debts based on selected date range
        var filteredDebts = DebtService.GetAllDebts()
            .Where(d => (!filterStartDate.HasValue || d.StartDate >= filterStartDate)
                        && (!filterDueDate.HasValue || d.DueDate <= filterDueDate))
            .ToList();

        // Recalculate debt totals for the filtered data
        totalDebt = filteredDebts.Sum(d => d.Amount);
        clearedDebt = filteredDebts.Where(d => d.Status == "Cleared").Sum(d => d.Amount);
        remainingDebt = totalDebt - clearedDebt;

        // Update the data array for the pie chart
        data = new double[] { (double)clearedDebt, (double)remainingDebt };

        StateHasChanged(); // Refresh the UI
    }

    private void ClearPieChartFilters()
    {
        // Clear the date range filters
        filterStartDate = null;
        filterDueDate = null;

        // Recalculate with all debts
        var allDebts = DebtService.GetAllDebts();
        totalDebt = allDebts.Sum(d => d.Amount);
        clearedDebt = allDebts.Where(d => d.Status == "Cleared").Sum(d => d.Amount);
        remainingDebt = totalDebt - clearedDebt;

        // Update the data array for the pie chart
        data = new double[] { (double)clearedDebt, (double)remainingDebt };

        StateHasChanged(); // Refresh the UI
    }

    private void FilterTopTransactions()
    {
        // Filter transactions by type
        var filtered = selectedFilterType switch
        {
            "Inflow" => transactions.Where(t => t.Type == "Credit"),
            "Outflow" => transactions.Where(t => t.Type == "Debit"),
            "Debts" => transactions.Where(d => d.Type == "Debt"),
            // "Debt" => debts.Where(d => d.Type == "Debt"),
            _ => transactions
        };

        // Sort and take top 5 by order
        if (selectedFilterOrder == "Highest")
        {
            filteredTransactions = filtered.OrderByDescending(t => t.Amount).Take(5).ToList();
        }
        else
        {
            filteredTransactions = filtered.OrderBy(t => t.Amount).Take(5).ToList();
        }

        StateHasChanged(); // Refresh UI
    }

    private void FilterPendingDebts()
    {
        var allDebts = DebtService.GetAllDebts(); // Re-fetch all debts
        pendingDebts = allDebts
            .Where(d => d.Status == "Pending"
                        && (!filterStartDate.HasValue || d.StartDate >= filterStartDate)
                        && (!filterDueDate.HasValue || d.DueDate <= filterDueDate))
            .ToList();
    }
    private void ClearFilters()
    {
        filterStartDate = null;
        filterDueDate = null;
        var allDebts = DebtService.GetAllDebts();
        pendingDebts = allDebts.Where(d => d.Status == "Pending").ToList();
    }

    private void ShowLogoutConfirmation()
    {
        IsLogout = true;
    }
    private void CloseLogoutConfirmation()
    {
        IsLogout = false;
    }
    private void Logout()
    {
        NavigateToLogin(); // Navigate to login page
    }

    private void NavigateToTransaction()
    {
        Nav.NavigateTo("/Transaction");
    }

    private void NavigateToDashboard()
    {
        Nav.NavigateTo("/dashboard");
    }

    private void NavigateToDebt()
    {
        Nav.NavigateTo("/Debt");
    }
    private void NavigateToLogin()
    {
        Nav.NavigateTo("/");
    }
}