@page "/dashboard"

<nav class="nav">
    <a class="nav-link active" @onclick="NavigateToDashboard">Dashboard</a>
    <a class="nav-link" @onclick="NavigateToTransaction">Transactions</a>
    <a class="nav-link" @onclick="NavigateToDebt">Debts</a>
    <div class="logout">
        @* <button type="button" class="btn w-100" @onclick="ShowLogoutConfirmation">Logout</button> *@
    </div>
</nav>

<h3>Dashboard</h3>

<div class="row">
    <!-- Total Balance Card -->
    <div class="col-md-4">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Total Balance</h5>
                <p class="card-text">@GlobalState.CurrentUser?.currency @totalBalance</p>
            </div>
        </div>
    </div>

    <!-- Total Inflows Card -->
    <div class="col-md-4">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Total Inflows</h5>
                <p class="card-text">@GlobalState.CurrentUser?.currency @totalInflows</p>
            </div>
        </div>
    </div>

    <!-- Total Outflows Card -->
    <div class="col-md-4">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Total Outflows</h5>
                <p class="card-text">@GlobalState.CurrentUser?.currency @totalOutflows</p>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <!-- Total Debt Card -->
    <div class="col-md-4">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Total Debt</h5>
                <p class="card-text">@GlobalState.CurrentUser?.currency @totalDebt</p>
            </div>
        </div>
    </div>

    <!-- Cleared Debt Card -->
    <div class="col-md-4">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Cleared Debt</h5>
                <p class="card-text">@GlobalState.CurrentUser?.currency @clearedDebt</p>
            </div>
        </div>
    </div>

    <!-- Remaining Debt Card -->
    <div class="col-md-4">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Remaining Debt</h5>
                <p class="card-text">@GlobalState.CurrentUser?.currency @remainingDebt</p>
            </div>
        </div>
    </div>
</div>
<!-- Sorting Controls -->
<div class="d-flex justify-content-between my-3">
    <div>
        <label for="sortField">Sort By:</label>
        <select id="sortField" @bind="selectedSortField" class="form-control-sm">
            <option value="Name">Name</option>
            <option value="Amount">Amount</option>
            <option value="Date">Date</option>
            <option value="Type">Type</option>
            <option value="Category">Category</option>
            <option value="Status">Status</option>
            <option value="Tags">Tags</option>
            <option value="Notes">Notes</option>
        </select>
    </div>

    <div>
        <label for="sortOrder">Order:</label>
        <select id="sortOrder" @bind="selectedSortOrder" class="form-control-sm">
            <option value="asc">Ascending</option>
            <option value="desc">Descending</option>
        </select>
    </div>

    <button @onclick="SortTransactions" class="btn btn-primary btn-sm align-self-end">
        Apply Sort
    </button>
</div>

<!-- Transaction Table -->
<h4>Transactions</h4>
<table class="table table-striped">
    <thead>
        <tr>
            <th>Name</th>
            <th>Amount</th>
            <th>Date</th>
            <th>Type</th>
            <th>Category</th>
            <th>Status</th>
            <th>Tags</th>
            <th>Notes</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var transaction in transactions)
        {
            <tr>
                <td>@transaction.Name</td>
                <td>@GlobalState.CurrentUser?.currency @transaction.Amount</td>
                <td>@transaction.Date.ToShortDateString()</td>
                <td>@transaction.Type</td>
                <td>@transaction.Category</td>
                <td>@transaction.Status</td>
                <td>@transaction.Tags</td>
                <td>@transaction.Notes</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private decimal totalBalance;
    private decimal totalInflows;
    private decimal totalOutflows;
    private decimal totalDebt;
    private decimal clearedDebt;
    private decimal remainingDebt;
    private List<Models.Transaction> transactions = new List<Models.Transaction>();

    // Sorting fields and order
    private string selectedSortField = "Name";
    private string selectedSortOrder = "asc";

    protected override async Task OnInitializedAsync()
    {
        transactions = TransactionService.GetAllTransactions();
        CalculateTotals();
    }

    private void CalculateTotals()
    {
        totalInflows = transactions.Where(t => t.Type == "Credit").Sum(t => t.Amount);
        totalOutflows = transactions.Where(t => t.Type == "Debit").Sum(t => t.Amount);
        totalDebt = transactions.Where(t => t.Type == "Debt").Sum(t => t.Amount);
        clearedDebt = transactions.Where(t => t.Type == "Debt" && t.Status == "Cleared").Sum(t => t.Amount);
        remainingDebt = totalDebt - clearedDebt;
        totalBalance = totalInflows - totalOutflows + remainingDebt;
    }
    private void SortTransactions()
    {
        // Sorting logic based on selected field and order
        if (selectedSortField == "Name")
        {
            transactions = selectedSortOrder == "asc" ?
                transactions.OrderBy(t => t.Name).ToList() :
                transactions.OrderByDescending(t => t.Name).ToList();
        }
        else if (selectedSortField == "Amount")
        {
            transactions = selectedSortOrder == "asc" ?
                transactions.OrderBy(t => t.Amount).ToList() :
                transactions.OrderByDescending(t => t.Amount).ToList();
        }
        else if (selectedSortField == "Date")
        {
            transactions = selectedSortOrder == "asc" ?
                transactions.OrderBy(t => t.Date).ToList() :
                transactions.OrderByDescending(t => t.Date).ToList();
        }
        else if (selectedSortField == "Type")
        {
            transactions = selectedSortOrder == "asc" ?
                transactions.OrderBy(t => t.Type).ToList() :
                transactions.OrderByDescending(t => t.Type).ToList();
        }
        else if (selectedSortField == "Category")
        {
            transactions = selectedSortOrder == "asc" ?
                transactions.OrderBy(t => t.Category).ToList() :
                transactions.OrderByDescending(t => t.Category).ToList();
        }
        else if (selectedSortField == "Status")
        {
            transactions = selectedSortOrder == "asc" ?
                transactions.OrderBy(t => t.Status).ToList() :
                transactions.OrderByDescending(t => t.Status).ToList();
        }
        else if (selectedSortField == "Tags")
        {
            transactions = selectedSortOrder == "asc" ?
                transactions.OrderBy(t => t.Tags).ToList() :
                transactions.OrderByDescending(t => t.Tags).ToList();
        }
        else if (selectedSortField == "Notes")
        {
            transactions = selectedSortOrder == "asc" ?
                transactions.OrderBy(t => t.Notes).ToList() :
                transactions.OrderByDescending(t => t.Notes).ToList();
        }

        StateHasChanged(); // Re-render the page to reflect sorted transactions
    }
    private void NavigateToTransaction()
    {
        Nav.NavigateTo("/Transaction");
    }

    private void NavigateToDashboard()
    {
        Nav.NavigateTo("/dashboard");
    }

    private void NavigateToDebt()
    {
        Nav.NavigateTo("/Debt");
    }

    // private void ShowLogoutConfirmation()
    // {
    //     IsLogout = true;
    // }
}
