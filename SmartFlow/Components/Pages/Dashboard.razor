@page "/dashboard"

<nav class="nav">
    <a class="nav-link active" @onclick="NavigateToDashboard">Dashboard</a>
    <a class="nav-link" @onclick="NavigateToTransaction">Transactions</a>
    <a class="nav-link" @onclick="NavigateToDebt">Debts</a>
    <div class="logout">
        @* <button type="button" class="btn w-100" @onclick="ShowLogoutConfirmation">Logout</button> *@
    </div>
</nav>

<h3>Dashboard</h3>

<div class="row">
    <!-- Total Balance Card -->
    <div class="col-md-4">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Total Balance</h5>
                <p class="card-text">@GlobalState.CurrentUser?.currency @totalBalance</p>
            </div>
        </div>
    </div>

    <!-- Total Inflows Card -->
    <div class="col-md-4">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Total Inflows</h5>
                <p class="card-text">@GlobalState.CurrentUser?.currency @totalInflows</p>
            </div>
        </div>
    </div>

    <!-- Total Outflows Card -->
    <div class="col-md-4">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Total Outflows</h5>
                <p class="card-text">@GlobalState.CurrentUser?.currency @totalOutflows</p>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <!-- Total Debt Card -->
    <div class="col-md-4">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Total Debt</h5>
                <p class="card-text">@GlobalState.CurrentUser?.currency @totalDebt</p>
            </div>
        </div>
    </div>

    <!-- Cleared Debt Card -->
    <div class="col-md-4">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Cleared Debt</h5>
                <p class="card-text">@GlobalState.CurrentUser?.currency @clearedDebt</p>
            </div>
        </div>
    </div>

    <!-- Remaining Debt Card -->
    <div class="col-md-4">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Remaining Debt</h5>
                <p class="card-text">@GlobalState.CurrentUser?.currency @remainingDebt</p>
            </div>
        </div>
    </div>
</div>
<!-- Filter Section -->
<h4>Filter Top 5 Transactions/Debts</h4>
<div class="d-flex align-items-center my-3">
    <label for="filterType" class="mr-2">Filter By:</label>
    <select id="filterType" @bind="selectedFilterType" class="form-control-sm mr-3">
        <option value="Inflow">Inflow</option>
        <option value="Outflow">Outflow</option>
        <option value="Debt">Debt</option>
    </select>

    <label for="filterOrder" class="mr-2">Order:</label>
    <select id="filterOrder" @bind="selectedFilterOrder" class="form-control-sm mr-3">
        <option value="Highest">Highest</option>
        <option value="Lowest">Lowest</option>
    </select>

    <button @onclick="FilterTopTransactions" class="btn btn-primary btn-sm">Apply Filter</button>
</div>

<!-- Filtered Transactions Table -->
<h5>Top 5 @selectedFilterType Transactions (@selectedFilterOrder)</h5>
<table class="table table-striped">
    <thead>
        <tr>
            <th>Name</th>
            <th>Amount</th>
            <th>Date</th>
            <th>Type</th>
            <th>Category</th>
            <th>Status</th>
            <th>Tags</th>
            <th>Notes</th>
        </tr>
    </thead>
    <tbody>

        @foreach (var transaction in filteredTransactions)
        {
            <tr>
                <td>@transaction.Name</td>
                <td>@GlobalState.CurrentUser?.currency @transaction.Amount</td>
                <td>@transaction.Date.ToShortDateString()</td>
                <td>@transaction.Type</td>
                <td>@transaction.Category</td>
                <td>@transaction.Status</td>
                <td>@transaction.Tags</td>
                <td>@transaction.Notes</td>
            </tr>
        }
    </tbody>
</table>


@code {
    private decimal totalBalance;
    private decimal totalInflows;
    private decimal totalOutflows;
    private decimal totalDebt;
    private decimal clearedDebt;
    private decimal remainingDebt;
    private List<Models.Transaction> transactions = new List<Models.Transaction>();
    private List<Debt> debts = new List<Debt>(); // Store debts separately
    private List<Models.Transaction> filteredTransactions = new List<Models.Transaction>();
    // Filter options
    private string selectedFilterType = "Inflow";
    private string selectedFilterOrder = "Highest";

    protected override async Task OnInitializedAsync()
    {
        transactions = TransactionService.GetAllTransactions();
        await CalculateDebtTotals(); // Call DebtService to calculate debt totals
        CalculateTotals();
        FilterTopTransactions();
    }

    private void CalculateTotals()
    {
        /// Calculate total inflows and total outflows from transactions
        totalInflows = transactions.Where(t => t.Type == "Credit").Sum(t => t.Amount);
        totalOutflows = transactions.Where(t => t.Type == "Debit").Sum(t => t.Amount);

        // Calculate the total balance as the difference between total inflows and total outflows
        totalBalance = totalInflows - totalOutflows;
    }

    private async Task CalculateDebtTotals()
    {
        // Get all debts from the DebtService
        var debts = DebtService.GetAllDebts();

        // Calculate total debt, cleared debt, and remaining debt
        totalDebt = debts.Sum(d => d.Amount);
        clearedDebt = debts.Where(d => d.Status == "Cleared").Sum(d => d.Amount);
        remainingDebt = totalDebt - clearedDebt;
    }

    private void FilterTopTransactions()
    {
        // Filter transactions by type
        var filtered = selectedFilterType switch
        {
            "Inflow" => transactions.Where(t => t.Type == "Credit"),
            "Outflow" => transactions.Where(t => t.Type == "Debit"),
            // "Debt" => debts.Where(d => d.Type == "Debt"),
            _ => transactions
        };

        // Sort and take top 5 by order
        if (selectedFilterOrder == "Highest")
        {
            filteredTransactions = filtered.OrderByDescending(t => t.Amount).Take(5).ToList();
        }
        else
        {
            filteredTransactions = filtered.OrderBy(t => t.Amount).Take(5).ToList();
        }

        StateHasChanged(); // Refresh UI
    }

    private void NavigateToTransaction()
    {
        Nav.NavigateTo("/Transaction");
    }

    private void NavigateToDashboard()
    {
        Nav.NavigateTo("/dashboard");
    }

    private void NavigateToDebt()
    {
        Nav.NavigateTo("/Debt");
    }

    // private void ShowLogoutConfirmation()
    // {
    //     IsLogout = true;
    // }
}
