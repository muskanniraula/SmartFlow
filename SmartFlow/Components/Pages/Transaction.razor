@page "/transaction"
<nav class="nav">
    <a class="nav-link active" @onclick="NavigateToDashboard">Dashboard</a>
    <a class="nav-link" @onclick="NavigateToTransaction">Transactions</a>
    <a class="nav-link" @onclick="NavigateToDebt">Debts</a>
    <div class="logout">
        <button type="button" class="btn w-100" @onclick="ShowLogoutConfirmation">Logout</button>
    </div>
</nav>

<h3>Transactions</h3>

<button class="btn btn-primary" @onclick="OpenModal">Add Transaction</button>
<div class="row mb-3">
    <!-- Total Transactions Card -->
    <div class="col-md-3">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Total Transactions</h5>
                <p class="card-text h4">@TotalTransactions</p>
            </div>
        </div>
    </div>

    <!-- Total Balance Card -->
    <div class="col-md-3">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Total Balance</h5>
                <p class="card-text h4">@GlobalState.CurrentUser?.currency @TotalBalance</p>
            </div>
        </div>
    </div>

    <!-- Inflow Transactions Card -->
    <div class="col-md-3">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Total Inflow</h5>
                <p class="card-text h4">@GlobalState.CurrentUser?.currency @TotalInflow</p>
            </div>
        </div>
    </div>

    <!-- Outflow Transactions Card -->
    <div class="col-md-3">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Total Outflow</h5>
                <p class="card-text h4">@GlobalState.CurrentUser?.currency @TotalOutflow</p>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <label>Search by Name</label>
        <input type="text" class="form-control" @bind="SearchQuery" placeholder="Search by Name" />
    </div>
    <div class="col-md-3">
        <label>Transaction Type</label>
        <select class="form-control" @bind="FilterType">
            <option value="All">All</option>
            <option value="Credit">Credit</option>
            <option value="Debit">Debit</option>
        </select>
    </div>

    <div class="col-md-3">
        <label>Category</label>
        <input type="text" class="form-control" @bind="FilterCategory" />
    </div>

    <div class="col-md-3">
        <label>Tags</label>
        <input type="text" class="form-control" @bind="FilterTags" />
    </div>

    <div class="col-md-3">
        <label>From Date</label>
        <input type="date" class="form-control" @bind="FilterFromDate" />
    </div>
</div>

<div class="row mb-3">
    <div class="col-md-3">
        <label>To Date</label>
        <input type="date" class="form-control" @bind="FilterToDate" />
    </div>
    <div class="col-md-3">
        <button class="btn btn-primary mt-4" @onclick="FilterTransactions">Apply Filters</button>
    </div>
</div>

<!-- Sorting Button -->
<button class="btn btn-outline-secondary mb-3" @onclick="ToggleSortOrder">
    Sort By Date (@(IsDescending ? "Descending" : "Ascending"))
</button>





<table class="table mt-3">
    <thead>
        <tr>
            <th>Name</th>
            <th>Amount</th>
            <th>Date</th>
            <th>Type</th>
            <th>Category</th>
            <th>Status</th>
            <th>Tags</th>
            <th>Notes</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var transaction in FilteredTransactions)
        {
            <tr>
                <td>@transaction.Name</td>
                <td>@GlobalState.CurrentUser?.currency @transaction.Amount</td>
                <td>@transaction.Date.ToShortDateString()</td>
                <td>@transaction.Type</td>
                <td>@transaction.Category</td>
                <td>@transaction.Status</td>
                <td>@transaction.Tags</td>
                <td>@transaction.Notes</td>
            </tr>
        }
    </tbody>
</table>

@if (showModal)
{
    <div class="modal fade show" tabindex="-1" role="dialog" style="display: block;" aria-modal="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add Transaction</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    @if (!string.IsNullOrEmpty(ErrorMessage))
                    {
                        <div class="alert alert-danger">
                            @ErrorMessage
                        </div>
                    }
                    <div class="mb-3">
                        <label>Name</label>
                        <input type="text" class="form-control" @bind="newtransaction.Name" />
                    </div>
                    <div class="mb-3">
                        <label>Amount</label>
                        <input type="number" class="form-control" @bind="newtransaction.Amount" />
                    </div>
                    <div class="mb-3">
                        <label>Date</label>
                        <input type="date" class="form-control" @bind="newtransaction.Date" />
                    </div>
                    <div class="mb-3">
                        <label>Type</label>
                        <select class="form-control" @bind="newtransaction.Type">
                            <option value=""></option>
                            <option value="Credit">Credit</option>
                            <option value="Debit">Debit</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label>Category</label>
                        <input type="text" class="form-control" @bind="newtransaction.Category" />
                    </div>
                    <div class="mb-3">
                        <label>Status</label>
                        <select class="form-control" @bind="newtransaction.Status">
                            <option value="Completed">Completed</option>
                            <option value="Failed">Failed</option>
                            <option value="Pending">Pending</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label>Tags</label>
                        <input type="text" class="form-control" @bind="newtransaction.Tags" />
                    </div>
                    <div class="mb-3">
                        <label>Notes</label>
                        <textarea class="form-control" @bind="newtransaction.Notes"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">Close</button>
                    <button type="button" class="btn btn-primary" @onclick="AddTransaction">Add</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}


<TransactionModal Visible="@isModalVisible" OnAddTransaction="AddTransaction" />

@code {
    private int TotalTransactions { get; set; } = 0; // Total number of transactions
    private decimal TotalBalance { get; set; } = 0; // Total balance
    private decimal TotalInflow { get; set; } = 0; // Total inflow (Credit)
    private decimal TotalOutflow { get; set; } = 0; // Total outflow (Debit)
    private bool IsLogout;
    private string SearchQuery = "";
    private string ErrorMessage;
    private decimal totalIncome;
    private decimal totalExpense;
    private decimal totalDebt;
    private decimal totalBalance;
    private Boolean showModal;
    private DateTime? FilterFromDate = null;
    private DateTime? FilterToDate = null;
    private Models.Transaction newtransaction = new();
    private Models.Debt newdebt = new();
    private List<Models.Transaction> transactions = new List<Models.Transaction>();
    private List<Models.Transaction> FilteredTransactions = new List<Models.Transaction>();
    private bool isModalVisible = false;

    // Filter properties
    private string FilterType = "All";
    private string FilterCategory = "";
    private string FilterTags = "";
    private DateTime StartDate = DateTime.MinValue;
    private DateTime EndDate = DateTime.Now;
    private bool IsDescending = true;



    private void ShowLogoutConfirmation()
    {
        IsLogout = true;
    }

    protected override async Task OnInitializedAsync()
    {
        transactions = TransactionService.GetAllTransactions();
        FilteredTransactions = transactions;
        CalculateTotals();
        UpdateDashboardMetrics();
    }

    private void OpenAddTransactionModal()
    {
        isModalVisible = true;
    }

    private async Task AddTransaction()
    {
        try
        {
            // Validate inputs
            if (string.IsNullOrEmpty(newtransaction.Type) ||
                string.IsNullOrEmpty(newtransaction.Name) ||
                newtransaction.Amount <= 0)
            {
                ErrorMessage = "Please fill in all required fields correctly.";
                StateHasChanged(); // Update UI
                return;
            }

            // Check for sufficient balance if it's a debit transaction
            if (newtransaction.Type == "Debit" && newtransaction.Amount > TotalBalance)
            {
                ErrorMessage = "Insufficient balance for this transaction.";
                StateHasChanged(); // Update UI
                return;
            }

            // Attempt to add the transaction via the service
            var success = await TransactionService.AddTransaction(newtransaction);

            if (success)
            {
                // Refresh the transaction list and recalculate totals
                transactions = TransactionService.GetAllTransactions();
                FilteredTransactions = transactions;
                CalculateTotals();
                UpdateDashboardMetrics();

                // Close the modal and reset fields
                CloseModal();
                newtransaction = new Models.Transaction { Date = DateTime.Now };
            }
            else
            {
                ErrorMessage = "Failed to add the transaction. Please try again.";
                StateHasChanged(); // Update UI
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = "An unexpected error occurred: " + ex.Message;
            StateHasChanged(); // Update UI
        }
    }



    // Filter transactions based on selected criteria
    private void FilterTransactions()
    {
        FilteredTransactions = transactions;

        // Filter by type
        if (FilterType != "All")
        {
            FilteredTransactions = FilteredTransactions.Where(t => t.Type == FilterType).ToList();
        }

        // Filter by category
        if (!string.IsNullOrEmpty(FilterCategory))
        {
            FilteredTransactions = FilteredTransactions
                .Where(t => t.Category.Contains(FilterCategory, StringComparison.OrdinalIgnoreCase)).ToList();
        }

        // Filter by tags
        if (!string.IsNullOrEmpty(FilterTags))
        {
            FilteredTransactions = FilteredTransactions
                .Where(t => t.Tags.Contains(FilterTags, StringComparison.OrdinalIgnoreCase)).ToList();
        }

        // Filter by date range
        if (FilterFromDate.HasValue)
        {
            FilteredTransactions = FilteredTransactions.Where(t => t.Date >= FilterFromDate.Value).ToList();
        }

        if (FilterToDate.HasValue)
        {
            FilteredTransactions = FilteredTransactions.Where(t => t.Date <= FilterToDate.Value).ToList();
        }

        // Search by name
        if (!string.IsNullOrEmpty(SearchQuery))
        {
            FilteredTransactions = FilteredTransactions
                .Where(t => t.Name.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase)).ToList();
        }

        // Apply sorting
        SortTransactions();
    }

    private void SortTransactions()
    {
        FilteredTransactions = IsDescending
            ? FilteredTransactions.OrderByDescending(t => t.Date).ToList()
            : FilteredTransactions.OrderBy(t => t.Date).ToList();
    }

    private void ToggleSortOrder()
    {
        IsDescending = !IsDescending;
        SortTransactions();
    }


    private void OpenModal()
    {
        newtransaction = new Models.Transaction { Date = DateTime.Now };

        ErrorMessage = null;
        showModal = true;

    }

    private void CloseModal()
    {
        showModal = false;
        ErrorMessage = null;
    }


    // private  void async AddTransaction()
    // {
    //     try
    //     {
    //         if (string.IsNullOrEmpty(newtransaction.Type) || string.IsNullOrEmpty(newtransaction.Name) || (newtransaction.Amount <= 0))
    //         {
    //             ErrorMessage = "Empty Field. Please select a type.";
    //             return;
    //         }

    //         if (newtransaction.Type == "Expense")
    //         {
    //             if (totalBalance < newtransaction.Amount)
    //             {
    //                 ErrorMessage = "Insufficient amount.";
    //                 return;
    //             }
    //         }

    //         if (newtransaction.Type == "Debt")
    //         {
    //             if (string.IsNullOrEmpty(newdebt.Source))
    //             {
    //                 ErrorMessage = "Please select a debt source.";
    //                 return;
    //             }

               
    //         }
    //         var transactionResult = await TransactionService.AddTransaction(newtransaction);

    //         if (transactionResult)
    //         {
    //             newtransaction = new Models.Transaction();
    //             newdebt = new Models.Debt();
    //             CloseModal();
    //         }
    //         else
    //         {
    //             ErrorMessage = "Failed to add the transaction. Please check the details.";
    //         }
    //     }
    //     catch (Exception ex)
    //     {
    //         ErrorMessage = "An unexpected error occurred.";
    //     }
    // }
    private void CalculateTotals()
    {
        TotalInflow = transactions.Where(t => t.Type == "Credit").Sum(t => t.Amount);
        TotalOutflow = transactions.Where(t => t.Type == "Debit").Sum(t => t.Amount);
        TotalBalance = TotalInflow - TotalOutflow;
    }
    private void UpdateDashboardMetrics()
    {
        TotalTransactions = transactions.Count;
    }





    private void NavigateToTransaction()
    {
        Nav.NavigateTo("/Transaction");
    }
    private void NavigateToDashboard()
    {
        Nav.NavigateTo("/dashboard");
    }
    private void NavigateToDebt()
    {
        Nav.NavigateTo("/Debt");
    }
    private void NavigateToLogin()
    {
        Nav.NavigateTo("/login");
    }

}